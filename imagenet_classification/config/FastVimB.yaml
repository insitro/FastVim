batch_size: 128
num_workers: 12
num_nodes: 1

pl_seed: 0

patch_size: 16 # for now only implemented when both stride and patch size is same

scanpath_type: rowwise  # rowwise, colwise
use_norm_after_ssm: True
rotate_every_block: True
collapse_method: mean # mean, max

weight_decay: 0.05
drop_path_rate: 0.4
use_ema_weights: True
ema_decay: 0.9999
training_epochs: 300
warmup_initial_lr: 0.000001
min_lr: 0.00001
scaling_rule: deit
lr: 0.001
warmup_epochs: 5
num_classes: 1000

vim_config:
  _target_: models.fastvim.vim_base_patch16_224_final_pool_mean_abs_pos_embed_with_noclstok_div2
  pretrained: false
  rotate_every_block: ${rotate_every_block}
  use_norm_after_ssm: ${use_norm_after_ssm}
  num_classes: ${num_classes}
  drop_path_rate: ${drop_path_rate}
  channels: 3
  patch_size: ${patch_size}
  stride: ${patch_size}
  scanpath_type: ${scanpath_type}
  collapse_method: ${collapse_method}

# Configuration for the dataloader
data_config:
  _target_: imagenet_classification.datasets_supervised.load_DataModule
  batch_size: ${batch_size}
  num_workers: ${num_workers}
  #augmentation
  img_size: 224
  hflip: 0.5
  vflip: 0.0
  eval_crop_ratio: 0.875
  color_jitter: 0.3
  auto_augment: 'rand-m9-mstd0.5-inc1'
  interpolation: 'bicubic'
  re_prob: 0.25
  re_mode: 'pixel'
  re_count: 1

# Configuration for the learning rate schedule
lr_config:
  _target_: imagenet_classification.utils.get_lr_scheduler
  dataloader: ${data_config}
  num_nodes: ${num_nodes}
  batch_size: ${batch_size}
  scheduling_epochs: ${training_epochs}
  warmup_epochs: ${warmup_epochs}
  lr: ${lr}
  warmup_initial_lr: ${warmup_initial_lr}
  min_lr: ${min_lr}
  scaling_rule: ${scaling_rule}

model_config:
  _target_: imagenet_classification.supervised_imagenet.SupervisedModule
  backbone: ${vim_config}
  lr_schedule: ${lr_config}
  num_classes: ${num_classes}
  label_smoothing: 0.1
  mixup: 0.8
  cutmix: 1.0
  mixup_mode: 'batch'
  mixup_prob: 1.0
  mixup_switch_prob: 0.5
  weight_decay: ${weight_decay}
  use_ema_weights: ${use_ema_weights}
  ema_decay: ${ema_decay}

